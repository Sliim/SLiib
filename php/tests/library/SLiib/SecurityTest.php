<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP version 5
 *
 * @category   SLiib
 * @package    SLiib
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @version    Release: 0.2
 * @link       http://www.sliim-projects.eu
 */
require_once 'SLiib/Application.php';

/**
 * Test class for SLiib_Security & SLiib_Security_Abstract.
 * Generated by PHPUnit on 2011-10-17 at 23:57:42.
 * Others security tests were in ApplicationTest !
 *
 * @package    SLiib
 * @subpackage UnitTests
 */
class SLiib_SecurityTest extends PHPUnit_Framework_TestCase
{

    /**
     * Positive security model stub
     *
     * @var Stubs_Security_Abstract
     */
    protected $_stubPositive;

    /**
     * Negative security model stub
     *
     * @var Stubs_Security_Abstract
     */
    protected $_stubNegative;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        SLiib_HTTP_Request::init();
        $this->_stubNegative = $this->getMockForAbstractClass(
            'SLiib_Security_Abstract_NegativeSecurityModel'
        );

        $this->_stubPositive = $this->getMockForAbstractClass(
            'SLiib_Security_Abstract_PositiveSecurityModel'
        );

        $this->_stubNegative->addRule(
            new SLiib_Security_Rule(
                1,
                'Test Rule',
                '^foo(.*)bar$',
                SLiib_Security_Abstract::LOCATION_PARAMETERS
            )
        );

    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->_stubPositive);
        unset($this->_stubNegative);

    }


    /**
     * Test check
     *
     * @cover SLiib_Security::check
     *
     * @return void
     */
    public function testCheck()
    {
        SLiib_Security::check(array($this->_stubNegative));

    }


    /**
     * Test check invalid checkers
     *
     * @cover SLiib_Security::check
     *
     * @return void
     */
    public function testCheckInvalidChecker()
    {
        try {
            SLiib_Security::check(array('w00t'));
        } catch (SLiib_Security_Exception_CheckerError $e) {
            $this->assertInstanceOf('SLiib_Security_Exception_CheckerError', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test no security model
     *
     * @cover SLiib_Security_Abstract::__construct
     *
     * @return void
     */
    public function testNoSecurityModel()
    {
        try {
            $this->getMockForAbstractClass('SLiib_Security_Abstract');
        } catch (SLiib_Security_Exception $e) {
            $this->assertInstanceOf('SLiib_Security_Exception', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test bad security model
     *
     * @cover SLiib_Security_Abstract::__construct
     *
     * @return void
     */
    public function testBadSecurityModel()
    {
        try {
            $stubs = $this->getMockForAbstractClass('Stubs_Security_Abstract', array('BadModel'));
        } catch (SLiib_Security_Exception $e) {
            $this->assertInstanceOf('SLiib_Security_Exception', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test add rule
     *
     * @cover SLiib_Security_Abstract::addRule
     *
     * @return void
     */
    public function testAddRule()
    {
        $this->_stubNegative->addRule(
            new SLiib_Security_Rule(
                2,
                'Test second Rule',
                '^foo(.*)bar$',
                SLiib_Security_Abstract::LOCATION_PARAMETERS
            )
        );

        $rule = $this->_stubNegative->getRule(2);
        $this->assertInstanceOf('SLiib_Security_Rule', $rule);
        $this->assertEquals(2, $rule->getId());

        try {
            $this->_stubNegative->addRule(
                new SLiib_Security_Rule(
                    1,
                    'Test Rule with already exist id',
                    '^foo(.*)bar$',
                    SLiib_Security_Abstract::LOCATION_PARAMETERS
                )
            );
        } catch (SLiib_Security_Exception_CheckerError $e) {
            $this->assertInstanceOf('SLiib_Security_Exception_CheckerError', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test get rule
     *
     * @cover SLiib_Security_Abstract::getRule
     *
     * @return void
     */
    public function testGetRule()
    {
        $rule = $this->_stubNegative->getRule(1);
        $this->assertInstanceOf('SLiib_Security_Rule', $rule);
        $this->assertEquals(1, $rule->getId());

        try {
            $rule = $this->_stubNegative->getRule(1337);
        } catch (SLiib_Security_Exception_CheckerError $e) {
            $this->assertInstanceOf('SLiib_Security_Exception_CheckerError', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


}

