<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP version 5
 *  
 * @category   SLiib
 * @package    SLiib
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @version    Release: 0.2
 * @link       http://www.sliim-projects.eu
 */
require_once 'PHPUnit/Framework.php';
require_once 'SLiib/SolR.php';

/**
 * Test class for SLiib_SolR.
 * Generated by PHPUnit on 2011-10-17 at 20:19:49.
 * 
 * Ce test s'appuie sur le schema SolR de Solrack
 * https://svn.sliim-projects.eu/public/Solrack/
 * 
 * @package    SLiib
 * @subpackage UnitTests
 */
class SLiib_SolRTest extends PHPUnit_Framework_TestCase
{

  /**
   * @var SLiib_SolR
   */
  protected $_object;

  /**
   * @var string Host
   */
  protected $_host = 'localhost';

  /**
   * @var int Port
   */
  protected $_port = 8983;


  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   * 
   * @return void
   */
  public function setUp()
  {
    try {
      $this->_object = new SLiib_SolR($this->_host, $this->_port);
    } catch (SLiib_SolR_Exception $e) {
      $this->markTestSkipped(
          'Ping to SolR failed at ' . $this->_host . ':' . $this->_port
      );
    }

  }


  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   * 
   * @return void
   */
  public function tearDown()
  {
    unset($this->_object);

  }


  /**
   * Test Ping
   * 
   * @return void
   */
  public function testPing()
  {
    $res = $this->_object->ping();
    $this->assertTrue($res);

  }


  /**
   * Test delete all
   * 
   * @return void
   */
  public function testDeleteAll()
  {
    $this->_object->deleteAll();

  }


  /**
   * Test update
   * 
   * @return void
   */
  public function testUpdate()
  {
    $xml  = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    $xml .= '<add><doc><field name="text">test indexing</field>';
    $xml .= '<field name="md5">d8e8fca2dc0f896fd7cb4cb0031ba249</field>';
    $xml .= '<field name="sha1">4e1243bd22c66e76c2ba9eddc1f91394e57f9f83';
    $xml .= '</field></doc></add>';

    $res = $this->_object->update($xml);

    $this->assertTrue($res);

  }


  /**
   * Test commit
   * 
   * @return void
   */
  public function testCommit()
  {
    $this->_object->commit();

  }


  /**
   * Test get
   * 
   * @return void
   */
  public function testGet()
  {
    $query  = 'test';
    $res    = $this->_object->get($query);
    $xmlRes = simplexml_load_string($res);

    $this->assertObjectHasAttribute('lst', $xmlRes);
    $this->assertObjectHasAttribute('result', $xmlRes);

  }


  /**
   * Test get total indexed
   * 
   * @return void
   */
  public function testGetTotalIndexed()
  {
    $res = $this->_object->getTotalIndexed();
    $this->assertGreaterThan(0, $res);

  }


}