<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP version 5
 *
 * @category   SLiib
 * @package    SLiib
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @version    Release: 0.2
 * @link       http://www.sliim-projects.eu
 */
require_once 'SLiib/Security/Rule.php';

/**
 * Test class for SLiib_Security_Rule.
 * Generated by PHPUnit on 2011-11-11 at 01:41:28.
 *
 * @package    SLiib
 * @subpackage UnitTests
 */
class SLiib_Security_RuleTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var SLiib_Security_Rule
     */
    protected $_object;

    /**
     * Test id
     * @var int
     */
    protected $_id = 1337;

    /**
     * Test name
     * @var string
     */
    protected $_name = 'Rule\'s Unit Tests';


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        $this->_object = new SLiib_Security_Rule($this->_id, $this->_name);

    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->_object);

    }


    /**
     * Test get id
     *
     * @covers SLiib_Security_Rule::getId
     *
     * @return void
     */
    public function testGetId()
    {
        $this->assertEquals($this->_id, $this->_object->getId());
        $this->assertInternalType('int', $this->_object->getId());

    }


    /**
     * Test get name
     *
     * @covers SLiib_Security_Rule::getName
     *
     * @return void
     */
    public function testGetName()
    {
        $this->assertEquals($this->_name, $this->_object->getName());
        $this->assertInternalType('string', $this->_object->getName());

    }


    /**
     * Test rule's patterns
     *
     * @covers SLiib_Security_Rule::setPattern
     * @covers SLiib_Security_Rule::getPattern
     * @covers SLiib_Security_Rule::addPatternElement
     *
     * @return void
     */
    public function testPattern()
    {
        $this->assertNull($this->_object->getPattern());

        $pattern = 'include(_once)?[\( ]?[\'\"\]{1}(.+)[\'\"]{1}[\)]?';
        $this->_object->setPattern($pattern);
        $this->assertEquals($pattern, $this->_object->getPattern());

        $elements = array(
                     'include',
                     'require',
                     'include_once',
                    );
        $this->_object
            ->addPatternElement($elements)
            ->addPatternElement('require_once');

        $this->assertEquals(
            '(include|require|include_once|require_once)',
            $this->_object->getPattern()
        );

    }


    /**
     * Test rule's locations
     *
     * @covers SLiib_Security_Rule::getLocation
     * @covers SLiib_Security_Rule::addLocation
     * @covers SLiib_Security_Rule::deleteLocation
     *
     * @return void
     */
    public function testLocation()
    {
        $locations = array(
                      'USERAGENT',
                      'PARAMETERS',
                      'METHOD',
                     );

        $this->_object->addLocation($locations);
        $this->assertTrue(in_array($locations[0], $this->_object->getLocation()));
        $this->assertTrue(in_array($locations[1], $this->_object->getLocation()));
        $this->assertTrue(in_array($locations[2], $this->_object->getLocation()));

        $this->_object->deleteLocation($locations[1]);
        $this->assertFalse(in_array($locations[1], $this->_object->getLocation()));
        $this->assertTrue(in_array($locations[0], $this->_object->getLocation()));
        $this->assertTrue(in_array($locations[2], $this->_object->getLocation()));

        $this->_object->addLocation($locations[1]);
        $this->assertTrue(in_array($locations[1], $this->_object->getLocation()));

        foreach ($locations as $location) {
            $this->_object->deleteLocation($location);
        }

        $rule = new SLiib_Security_Rule($this->_id, $this->_name, '', $locations[0]);
        $this->assertTrue(in_array($locations[0], $rule->getLocation()));

    }


}
?>
