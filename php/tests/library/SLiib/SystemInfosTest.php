<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP version 5
 *
 * @category   SLiib
 * @package    SLiib
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @version    Release: 0.2
 * @link       http://www.sliim-projects.eu
 */

/**
 * Test class for SLiib_SystemInfos.
 * Generated by PHPUnit on 2011-10-14 at 20:56:19.
 *
 * @package    SLiib
 * @subpackage UnitTests
 */
class SLiib_SystemInfosTest extends PHPUnit_Framework_TestCase
{


    /**
     * Appel commande Apache2
     * apache2 on debian testing fail with normal user (not /usr/sbin in his $PATH)
     *
     * @return void
     */
    public function testCmdApache2()
    {
        try {
            $res = SLiib_SystemInfos::CMD_APACHE2_VERSION('serialize');
            $this->assertInternalType('string', $res);
            $res = SLiib_SystemInfos::CMD_APACHE2_COMPILED_MODULES();
            $this->assertInternalType('string', $res);
        } catch (SLiib_SystemInfos_Exception_CommandFailed $e) {
            $this->assertInstanceOf('SLiib_SystemInfos_Exception_CommandFailed', $e);
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

    }


    /**
     * Appel commande PHP
     *
     * @return void
     */
    public function testCmdPHP()
    {
        $res = SLiib_SystemInfos::CMD_PHP_VERSION();
        $this->assertInternalType('string', $res);

        $res = SLiib_SystemInfos::CMD_PHP_MODULES();
        $this->assertInternalType('string', $res);

    }


    /**
     * Appel commande Uname
     *
     * @return void
     */
    public function testCmdUname()
    {
        $res = SLiib_SystemInfos::CMD_UNAME_KERNEL_RELEASE();
        $this->assertInternalType('string', $res);

        $res = SLiib_SystemInfos::CMD_UNAME_OS_INFOS('serialize');
        $this->assertInternalType('string', $res);

    }


    /**
     * Appel commande LSBRelease
     *
     * @return void
     */
    public function testCmdLsbRelease()
    {
        $res = SLiib_SystemInfos::CMD_LSB_RELEASE_CODENAME();
        $this->assertInternalType('string', $res);

        $res = SLiib_SystemInfos::CMD_LSB_RELEASE_RELEASE();
        $this->assertInternalType('string', $res);

    }


    /**
     * Test command unknown
     *
     * @return void
     */
    public function testCmdUnknown()
    {
        try {
            $res = SLiib_SystemInfos::CMD_UNKNOWN();
        } catch (SLiib_SystemInfos_Exception_BadMethodCall $e) {
            $this->assertInstanceOf('SLiib_SystemInfos_Exception_BadMethodCall', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test command failed
     *
     * @return void
     */
    public function testCmdFailed()
    {
        try {
            $res = Stubs_SystemInfos::CMD_FAILED();
        } catch (SLiib_SystemInfos_Exception_CommandFailed $e) {
            $this->assertInstanceOf('SLiib_SystemInfos_Exception_CommandFailed', $e);
            return;
        } catch (Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


}