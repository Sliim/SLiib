<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP version 5
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @version    Release: 0.2
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib\WebApp;
use SLiib\WebApp\Request;
/**
 * Test class for \SLiib\WebApp\Request.
 * Generated by PHPUnit on 2011-11-22 at 20:07:43.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Test object
     * @var \SLiib\WebApp\Request
     */
    protected $_object;

    /**
     * Fake request uri
     * @var string
     */
    private $_requestUri = '/foo/bar/getparam/value';

    /**
     * Fake client ip
     * @var string
     */
    private $_clientIp = '127.0.0.3';

    /**
     * Fake user agent
     * @var string
     */
    private $_ua = '31337bot';

    /**
     * Fake http method
     * @var string
     */
    private $_method = 'GET';

    /**
     * Fake referer
     * @var string
     */
    private $_referer = 'http://www.hellokitty.com';

    /**
     * Post params
     * @var array
     */
    private $_post = array();

    /**
     * Cookies
     * @var array
     */
    private $_cookies = array();


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        $this->_post    = array('params' => 'baz');
        $this->_cookies = array('user_password' => 'passSecur3d');

        \Tools\Request::setRequestUri($this->_requestUri);
        \Tools\Request::setRemoteIp($this->_clientIp);
        \Tools\Request::setUserAgent($this->_ua);
        \Tools\Request::setRequestMethod($this->_method);
        \Tools\Request::setReferer($this->_referer);
        \Tools\Request::setPost($this->_post);
        \Tools\Request::setCookie($this->_cookies);

    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->_object);

    }


    /**
     * Test get an instance not initialized
     *
     * @return void
     */
    public function testGetInstanceNotInit()
    {
        try {
            $object = Request::getInstance();
        } catch (Request\Exception $e) {
            $this->assertInstanceOf('\SLiib\WebApp\Request\Exception', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test get instance
     *
     * @covers \SLiib\WebApp\Request::init
     * @covers \SLiib\WebApp\Request::__construct
     * @covers \SLiib\WebApp\Request::getInstance
     * @covers \SLiib\WebApp\Request::_initProperties
     * @covers \SLiib\WebApp\Request::_parseUrl
     *
     * @return void
     */
    public function testGetInstance()
    {
        $this->_setObject();
        $this->assertInstanceOf('\SLiib\WebApp\Request', $this->_object);

    }


    /**
     * Test get controller
     *
     * @covers \SLiib\WebApp\Request::getController
     *
     * @return void
     */
    public function testGetController()
    {
        $this->_setObject();
        $this->assertEquals('foo', $this->_object->getController());

    }


    /**
     * Test index controller & index action
     *
     * @return void
     */
    public function testIndexControllerIndexAction()
    {
        \Tools\Request::setRequestUri('/');
        $this->_setObject();
        $this->assertEquals('index', $this->_object->getController());
        $this->assertEquals('index', $this->_object->getAction());

    }


    /**
     * Test index action
     *
     * @return void
     */
    public function testIndexAction()
    {
        \Tools\Request::setRequestUri('/foo');
        $this->_setObject();
        $this->assertEquals('foo', $this->_object->getController());
        $this->assertEquals('index', $this->_object->getAction());

    }


    /**
     * Test get action
     *
     * @covers \SLiib\WebApp\Request::getAction
     *
     * @return void
     */
    public function testGetAction()
    {
        $this->_setObject();
        $this->assertEquals('bar', $this->_object->getAction());

    }


    /**
     * Test get request uri
     *
     * @covers \SLiib\WebApp\Request::getRequestUri
     *
     * @return void
     */
    public function testGetRequestUri()
    {
        $this->_setObject();
        $this->assertEquals($this->_requestUri, $this->_object->getRequestUri());

    }


    /**
     * Test get parameters post | get
     *
     * @covers \SLiib\WebApp\Request::getParameters
     *
     * @return void
     */
    public function testGetParameters()
    {
        $this->_setObject();
        $params = $this->_object->getParameters();

        $this->assertArrayHasKey('getparam', $params);
        $this->assertEquals('value', $params['getparam']);

        \Tools\Request::setRequestMethod('POST');
        $this->_setObject();

        $params = $this->_object->getParameters();
        $this->assertEquals($this->_post, $params);

        \Tools\Request::setRequestMethod('WOOT');
        $this->_setObject();

        $params = $this->_object->getParameters();
        $this->assertTrue(empty($params));

    }


    /**
     * Test get client ip
     *
     * @covers \SLiib\WebApp\Request::getClientIp
     *
     * @return void
     */
    public function testGetClientIp()
    {
        $this->_setObject();
        $this->assertEquals($this->_clientIp, $this->_object->getClientIp());

    }


    /**
     * Test get user agent
     *
     * @covers \SLiib\WebApp\Request::getUserAgent
     *
     * @return void
     */
    public function testGetUserAgent()
    {
        $this->_setObject();
        $this->assertEquals($this->_ua, $this->_object->getUserAgent());

    }


    /**
     * Test get request method
     *
     * @covers \SLiib\WebApp\Request::getRequestMethod
     *
     * @return void
     */
    public function testGetRequestMethod()
    {
        $this->_setObject();
        $this->assertEquals($this->_method, $this->_object->getRequestMethod());

    }


    /**
     * Test get cookies
     *
     * @covers \SLiib\WebApp\Request::getCookies
     *
     * @return void
     */
    public function testGetCookies()
    {
        $this->_setObject();
        $this->assertEquals($this->_cookies, $this->_object->getCookies());

    }


    /**
     * Test get referer
     *
     * @covers \SLiib\WebApp\Request::getReferer
     *
     * @return void
     */
    public function testGetReferer()
    {
        $this->_setObject();
        $this->assertEquals($this->_referer, $this->_object->getReferer());

    }


    /**
     * Test if request is a post method
     *
     * @covers \SLiib\WebApp\Request::isPost
     *
     * @return void
     */
    public function testIsPost()
    {
        \Tools\Request::setRequestMethod('POST');
        $this->_setObject();

        $this->assertTrue($this->_object->isPost());

        \Tools\Request::setRequestMethod('GET');
        $this->_setObject();

        $this->assertFalse($this->_object->isPost());

    }


    /**
     * Set test object
     *
     * @return void
     */
    private function _setObject()
    {
        Request::init();
        $this->_object = Request::getInstance();

    }


}
?>
