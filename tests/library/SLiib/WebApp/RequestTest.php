<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP Version 5.3
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib\WebApp;

/**
 * Test class for \SLiib\WebApp\Request.
 * Generated by PHPUnit on 2011-11-22 at 20:07:43.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Test object
     * @var \SLiib\WebApp\Request
     */
    protected $object;

    /**
     * Fake request uri
     * @var string
     */
    private $requestUri = '/foo/bar/getparam/value';

    /**
     * Fake client ip
     * @var string
     */
    private $clientIp = '127.0.0.3';

    /**
     * Fake user agent
     * @var string
     */
    private $ua = '31337bot';

    /**
     * Fake http method
     * @var string
     */
    private $method = 'GET';

    /**
     * Fake referer
     * @var string
     */
    private $referer = 'http://www.hellokitty.com';

    /**
     * Post params
     * @var array
     */
    private $post = array();

    /**
     * Fake client's cookies
     * @var array
     */
    private $cookies = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        $this->post    = array('params' => 'baz');
        $this->cookies = array('user_password' => 'passSecur3d');

        \Tools\Request::setRequestUri($this->requestUri);
        \Tools\Request::setRemoteIp($this->clientIp);
        \Tools\Request::setUserAgent($this->ua);
        \Tools\Request::setRequestMethod($this->method);
        \Tools\Request::setReferer($this->referer);
        \Tools\Request::setPost($this->post);
        \Tools\Request::setCookie($this->cookies);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test get an instance not initialized
     *
     * @return void
     */
    public function testGetInstanceNotInit()
    {
        $this->setExpectedException('\SLiib\WebApp\Request\Exception');
        $object = Request::getInstance();
    }

    /**
     * Test get instance
     *
     * @covers \SLiib\WebApp\Request::init
     * @covers \SLiib\WebApp\Request::__construct
     * @covers \SLiib\WebApp\Request::getInstance
     * @covers \SLiib\WebApp\Request::initProperties
     * @covers \SLiib\WebApp\Request::parseUrl
     *
     * @return void
     */
    public function testGetInstance()
    {
        $this->setObject();
        $this->assertInstanceOf('\SLiib\WebApp\Request', $this->object);
    }

    /**
     * Test get controller
     *
     * @covers \SLiib\WebApp\Request::getController
     *
     * @return void
     */
    public function testGetController()
    {
        $this->setObject();
        $this->assertEquals('foo', $this->object->getController());

    }

    /**
     * Test index controller & index action
     *
     * @return void
     */
    public function testIndexControllerIndexAction()
    {
        \Tools\Request::setRequestUri('/');
        $this->setObject();
        $this->assertEquals('index', $this->object->getController());
        $this->assertEquals('index', $this->object->getAction());
    }

    /**
     * Test index action
     *
     * @return void
     */
    public function testIndexAction()
    {
        \Tools\Request::setRequestUri('/foo');
        $this->setObject();
        $this->assertEquals('foo', $this->object->getController());
        $this->assertEquals('index', $this->object->getAction());
    }

    /**
     * Test get action
     *
     * @covers \SLiib\WebApp\Request::getAction
     *
     * @return void
     */
    public function testGetAction()
    {
        $this->setObject();
        $this->assertEquals('bar', $this->object->getAction());

    }

    /**
     * Test get request uri
     *
     * @covers \SLiib\WebApp\Request::getRequestUri
     *
     * @return void
     */
    public function testGetRequestUri()
    {
        $this->setObject();
        $this->assertEquals($this->requestUri, $this->object->getRequestUri());
    }

    /**
     * Test get parameters post | get
     *
     * @covers \SLiib\WebApp\Request::getParameters
     *
     * @return void
     */
    public function testGetParameters()
    {
        $this->setObject();
        $params = $this->object->getParameters();

        $this->assertArrayHasKey('getparam', $params);
        $this->assertEquals('value', $params['getparam']);

        \Tools\Request::setRequestMethod('POST');
        $this->setObject();

        $params = $this->object->getParameters();
        $this->assertEquals($this->post, $params);

        \Tools\Request::setRequestMethod('WOOT');
        $this->setObject();

        $params = $this->object->getParameters();
        $this->assertTrue(empty($params));
    }

    /**
     * Test get client ip
     *
     * @covers \SLiib\WebApp\Request::getClientIp
     *
     * @return void
     */
    public function testGetClientIp()
    {
        $this->setObject();
        $this->assertEquals($this->clientIp, $this->object->getClientIp());
    }

    /**
     * Test get user agent
     *
     * @covers \SLiib\WebApp\Request::getUserAgent
     *
     * @return void
     */
    public function testGetUserAgent()
    {
        $this->setObject();
        $this->assertEquals($this->ua, $this->object->getUserAgent());
    }

    /**
     * Test get request method
     *
     * @covers \SLiib\WebApp\Request::getRequestMethod
     *
     * @return void
     */
    public function testGetRequestMethod()
    {
        $this->setObject();
        $this->assertEquals($this->method, $this->object->getRequestMethod());
    }

    /**
     * Test get cookies
     *
     * @covers \SLiib\WebApp\Request::getCookies
     *
     * @return void
     */
    public function testGetCookies()
    {
        $this->setObject();
        $this->assertEquals($this->cookies, $this->object->getCookies());
    }

    /**
     * Test get referer
     *
     * @covers \SLiib\WebApp\Request::getReferer
     *
     * @return void
     */
    public function testGetReferer()
    {
        $this->setObject();
        $this->assertEquals($this->referer, $this->object->getReferer());
    }

    /**
     * Test if request is a post method
     *
     * @covers \SLiib\WebApp\Request::isPost
     *
     * @return void
     */
    public function testIsPost()
    {
        \Tools\Request::setRequestMethod('POST');
        $this->setObject();

        $this->assertTrue($this->object->isPost());

        \Tools\Request::setRequestMethod('GET');
        $this->setObject();

        $this->assertFalse($this->object->isPost());
    }

    /**
     * Set test object
     *
     * @return void
     */
    private function setObject()
    {
        Request::init();
        $this->object = Request::getInstance();
    }
}
