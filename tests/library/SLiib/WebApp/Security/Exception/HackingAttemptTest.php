<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP Version 5.3
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib\WebApp\Security\Exception;

use SLiib\WebApp\Security\Rule;

/**
 * Test class for \SLiib\WebApp\Security\Exception\HackingAttempt.
 * Generated by PHPUnit on 2011-11-22 at 23:12:33.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class HackingAttemptTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Test object
     * @var \SLiib\WebApp\Security\Exception\HackingAttempt
     */
    protected $object;

    /**
     * Fake checker name
     * @var string
     */
    private $checkerName = 'CheckerNameTest';

    /**
     * Rule for test
     * @var \SLiib\WebApp\Security\Rule
     */
    private $rule = null;

    /**
     * Fake location
     * @var string
     */
    private $location = 'LocationTest';

    /**
     * Fake reason
     * @var string
     */
    private $reason = 'ReasonTest';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers \SLiib\WebApp\Security\Exception\HackingAttempt::__construct
     *
     * @return void
     */
    public function setUp()
    {
        $this->rule   = new Rule(1337, 'RuleTest');
        $this->object = new HackingAttempt(
            $this->checkerName,
            $this->rule,
            $this->location,
            $this->reason
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test get checker name
     *
     * @covers \SLiib\WebApp\Security\Exception\HackingAttempt::getCheckerName
     *
     * @return void
     */
    public function testGetCheckerName()
    {
        $this->assertEquals($this->checkerName, $this->object->getCheckerName());
    }

    /**
     * Test get rule
     *
     * @covers \SLiib\WebApp\Security\Exception\HackingAttempt::getRule
     *
     * @return void
     */
    public function testGetRule()
    {
        $rule = $this->object->getRule();
        $this->assertInstanceOf('\SLiib\WebApp\Security\Rule', $rule);
        $this->assertEquals(1337, $rule->getId());
        $this->assertEquals('RuleTest', $rule->getMessage());
    }

    /**
     * Test get location
     *
     * @covers \SLiib\WebApp\Security\Exception\HackingAttempt::getLocation
     *
     * @return void
     */
    public function testGetLocation()
    {
        $this->assertEquals($this->location, $this->object->getLocation());
    }

    /**
     * Test get reason
     *
     * @covers \SLiib\WebApp\Security\Exception\HackingAttempt::getReason
     *
     * @return void
     */
    public function testGetReason()
    {
        $this->assertEquals($this->reason, $this->object->getReason());
    }

    /**
     * Test is a runtime exception
     *
     * @return void
     */
    public function testRuntimeException()
    {
        $this->assertInstanceOf('\SLiib\IException\Runtime', $this->object);
    }
}

