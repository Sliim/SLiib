<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP Version 5.3
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib;

/**
 * Test class for \SLiib\SolR.
 * Generated by PHPUnit on 2011-10-17 at 20:19:49.
 *
 * This test use a stub.
 * You can install it with the script tests/others/stub_solr_install.sh.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class SolRTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Objet de test
     * @var \SLiib\SolR
     */
    protected $object;

    /**
     * Host
     * @var string
     */
    protected $host = 'localhost';

    /**
     * Port
     * @var int
     */
    protected $port = 8983;

    /**
     * XML string to update for test
     * @var string
     */
    protected $xmlStr;

    /**
     * Start Solr stub instance
     *
     * @return void
     */
    public static function setUpBeforeClass()
    {
        if (\Stubs\SolR::installed() && \Stubs\SolR::jvmAvailable()) {
            \Stubs\SolR::start();
        }

        //Wait for SolR started
        sleep(10);
    }

    /**
     * Stop Solr stub instance
     *
     * @return void
     */
    public static function tearDownAfterClass()
    {
        \Stubs\SolR::stop();
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        try {
            $this->object = new SolR($this->host, $this->port);
        } catch (SolR\Exception $e) {
            $this->markTestSkipped(
                'Ping to SolR failed at ' . $this->host . ':' . $this->port
            );
        }

        $this->xmlStr  = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
        $this->xmlStr .= '<add><doc><field name="id">foo</field>';
        $this->xmlStr .= '<field name="name">This is a stub';
        $this->xmlStr .= '</field></doc></add>';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test Ping
     *
     * @covers \SLiib\SolR::ping
     *
     * @return void
     */
    public function testPing()
    {
        $res = $this->object->ping();
        $this->assertTrue($res);
    }

    /**
     * Test delete all
     *
     * @covers \SLiib\SolR::deleteAll
     *
     * @return void
     */
    public function testDeleteAll()
    {
        $this->object->deleteAll();
    }

    /**
     * Test update
     *
     * @covers \SLiib\SolR::update
     *
     * @return void
     */
    public function testUpdate()
    {
        $res = $this->object->update($this->xmlStr);

        $this->assertTrue($res);
    }

    /**
     * Test commit
     *
     * @covers \SLiib\SolR::commit
     *
     * @return void
     */
    public function testCommit()
    {
        $this->object->commit();
    }

    /**
     * Test get
     *
     * @covers \SLiib\SolR::get
     * @covers \SLiib\SolR::escapeSpecialChar
     *
     * @return void
     */
    public function testGet()
    {
        $query  = 'test';
        $res    = $this->object->get($this->object->escapeSpecialChar($query));
        $xmlRes = simplexml_load_string($res);

        $this->assertObjectHasAttribute('lst', $xmlRes);
        $this->assertObjectHasAttribute('result', $xmlRes);
    }

    /**
     * Test get total indexed
     *
     * @covers \SLiib\SolR::getTotalIndexed
     *
     * @return void
     */
    public function testGetTotalIndexed()
    {
        $res = $this->object->getTotalIndexed();
        $this->assertGreaterThan(0, $res);
    }

    /**
     * Test with bad port
     *
     * @return void
     */
    public function testBadPort()
    {
        $object = new SolR($this->host, 1337, false);

        $res = $object->ping();
        $this->assertFalse($res);

        $res = $object->update($this->xmlStr);
        $this->assertFalse($res);

        $res = $object->get('*:*');
        $this->assertFalse($res);

        $res = $object->getTotalIndexed();
        $this->assertFalse($res);

        $this->setExpectedException('\SLiib\SolR\Exception');
        $object = new SolR($this->host, 1337, true);
    }

    /**
     * Test bad xml string
     *
     * @covers \SLiib\SolR::update
     * @covers \SLiib\SolR::get
     *
     * @return void
     */
    public function testBadXmlString()
    {
        $res = $this->object->update('foo');
        $this->assertFalse($res);

        $res = $this->object->get('***');
        $this->assertFalse($res);
    }
}
