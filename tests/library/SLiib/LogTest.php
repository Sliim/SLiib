<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP Version 5.3
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib;


/*
 * Define STDOUT and STDERR constant in SLiib namespace
 */
$stdout = fopen('/tmp/stdout.log', 'w');
define('TMP_STDOUT', $stdout);
const STDOUT = TMP_STDOUT;
fclose($stdout);

$stderr = fopen('/tmp/stderr.log', 'w');
define('TMP_STDERR', $stderr);
const STDERR = TMP_STDERR;
fclose($stderr);


/**
 * Test class for \SLiib\Log.
 * Generated by PHPUnit on 2011-10-11 at 23:52:53.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class LogTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Objet de test
     * @var \SLiib\Log
     */
    protected $_object;

    /**
     * Nom du fichier
     * @var \string
     */
    protected $_filename;

    /**
     * Format de test
     * @var \string
     */
    protected $_testFormat;

    /**
     * Format de test long
     * @var \string
     */
    protected $_testLongFormat;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return \void
     */
    public function setUp()
    {
        $this->_filename       = 'files/LogTest.log';
        $this->_testFormat     = '[%T][%d]%m';
        $this->_testLongFormat = '[%T] [%d %t] [%U] [%@] %m';

        $this->_object = new Log($this->_filename, TRUE);

    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return \void
     */
    public function tearDown()
    {
        unlink($this->_filename);
        unset($this->_object);

    }


    /**
     * Test Get/Set Format method
     *
     * @covers \SLiib\Log::setFormat
     * @covers \SLiib\Log::getFormat
     *
     * @return \void
     */
    public function testSetGetFormat()
    {
        $format = $this->_object->getFormat();
        $this->assertEquals('[%d %t] [%T] - %m', $format);

        $this->_object->setFormat($this->_testFormat);
        $format = $this->_object->getFormat();
        $this->assertEquals($this->_testFormat, $format);

    }


    /**
     * Test write log
     *
     * @covers \SLiib\Log::write
     * @covers \SLiib\Log::<private>
     *
     * @return \void
     */
    public function testLog()
    {
        $this->_object->setFormat('%m');
        $this->assertFileExists($this->_filename);
        $text = 'w000t from \SLiib\LogTest';

        $this->_object->write($text, Log::INFO, FALSE);

        $this->assertEquals(
            $text,
            str_replace(
                array(
                 "\r",
                 "\n",
                ),
                '',
                file_get_contents($this->_filename)
            )
        );

    }


    /**
     * Test write in file without perm
     *
     * @return \void
     */
    public function testWriteFailure()
    {
        $file = 'files/unwritable.log';
        chmod($file, 0444);

        try {
            $log = new Log($file);
            $log->debug('not permit to write');
        } catch (Log\Exception $e) {
            $this->assertInstanceOf('\SLiib\Log\Exception', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test print string in stdout/stderr with color
     *
     * @covers \SLiib\Log::write
     * @covers \SLiib\Log::debug
     * @covers \SLiib\Log::warn
     * @covers \SLiib\Log::error
     * @covers \SLiib\Log::crit
     * @covers \SLiib\Log::info
     * @covers \SLiib\Log::<private>
     *
     * @return \void
     */
    public function testColor()
    {
        $this->_object->setFormat($this->_testLongFormat);
        $this->_object->debug('DEBUG', TRUE);
        $this->_object->warn('WARN', TRUE);
        $this->_object->error('ERROR', TRUE);
        $this->_object->crit('CRIT', TRUE);
        $this->_object->info('INFO', TRUE);

        $this->assertStringEqualsFile(
            '/tmp/stdout.log',
            "\033[34mstring(5) \"DEBUG\"\n\033[0m\n\033[0mINFO\033[0m\n"
        );
        $this->assertStringEqualsFile(
            '/tmp/stderr.log',
            "\033[33mWARN\033[0m\n\033[31mERROR\033[0m\n\033[31mCRIT\033[0m\n"
        );

    }


    /**
     * Test with server Infos
     *
     * @covers \SLiib\Log::write
     * @covers \SLiib\Log::<private>
     *
     * @return \void
     */
    public function testWithServerInfo()
    {
        $GLOBALS['_SERVER'];
        $_SERVER['REMOTE_ADDR']     = '127.0.0.1';
        $_SERVER['HTTP_USER_AGENT'] = 'w00tw00t';

        $this->_object->setFormat($this->_testLongFormat);
        $this->_object->write('fooo');

    }


}