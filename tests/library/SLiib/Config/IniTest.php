<?php
/**
 * This source file is part of SLiib.
 *
 * SLiib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SLiib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with SLiib. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 *
 * PHP Version 5.3
 *
 * @category   SLiib
 * @package    Tests
 * @subpackage UnitTests
 * @author     Sliim <sliim@mailoo.org>
 * @license    GNU/GPL http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://www.sliim-projects.eu
 */

namespace SLiib\Config;

/**
 * Test class for \SLiib\Config\Ini.
 * Generated by PHPUnit on 2011-10-12 at 00:53:28.
 *
 * @package    Tests
 * @subpackage UnitTests
 */
class IniTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Test object
     * @var \SLiib\Config\Ini
     */
    protected $_object;

    /**
     * Test file
     * @var \string
     */
    protected $_iniFile;

    /**
     * Not exists file
     * @var \string
     */
    protected $_iniFail;

    /**
     * Bad section definition
     * @var \string
     */
    protected $_iniBadSection;

    /**
     * No parent section
     * @var \string
     */
    protected $_iniNoParent;

    /**
     * Directive definition syntax error
     * @var \string
     */
    protected $_iniSyntaxError;

    /**
     * Directive definition syntax error bis
     * @var \string
     */
    protected $_iniSEbis;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return \void
     */
    public function setUp()
    {
        $this->_iniFile        = 'files/configs/config.ini';
        $this->_iniFail        = 'files/configs/notexist.ini';
        $this->_iniBadSection  = 'files/configs/badsection.ini';
        $this->_iniBadKey      = 'files/configs/badkey.ini';
        $this->_iniNoParent    = 'files/configs/noparent.ini';
        $this->_iniSyntaxError = 'files/configs/syntaxerror.ini';
        $this->_object         = Ini::read($this->_iniFile);

    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return \void
     */
    public function tearDown()
    {
        unset($this->_object);

    }


    /**
     * Test get all directives
     *
     * @return \void
     */
    public function testConfig()
    {
        $this->assertObjectHasAttribute('application', $this->_object);
        $this->assertObjectHasAttribute('development', $this->_object);
        $this->assertObjectHasAttribute('production', $this->_object);

        $this->assertInstanceOf('\SLiib\Config', $this->_object->application);
        $this->assertInstanceOf('\SLiib\Config', $this->_object->development);
        $this->assertInstanceOf('\SLiib\Config', $this->_object->production);

        $this->assertObjectHasAttribute('docsMenu', $this->_object->development);
        $this->assertObjectHasAttribute('sysInfos', $this->_object->development);
        $this->assertObjectHasAttribute('docsMenu', $this->_object->production);
        $this->assertObjectHasAttribute('sysInfos', $this->_object->production);

        $this->assertInternalType(
            'string',
            $this->_object->application->sysInfos
        );

        $this->assertEquals('On', $this->_object->development->docsMenu);
        $this->assertEquals('Off', $this->_object->production->docsMenu);

        $this->assertEquals('On', $this->_object->development->sysInfos);
        $this->assertEquals('Off', $this->_object->production->sysInfos);

        $this->assertInstanceOf('\SLiib\Config', $this->_object->application->foo);
        $this->assertObjectHasAttribute('bar', $this->_object->application->foo);
        $this->assertInternalType('string', $this->_object->application->foo->bar);
        $this->assertEquals('foobar', $this->_object->application->foo->bar);

        $this->assertInstanceOf('\SLiib\Config', $this->_object->application->test->foo->bar);
        $this->assertObjectHasAttribute('z1337', $this->_object->application->test->foo->bar);
        $this->assertObjectHasAttribute('z7331', $this->_object->application->test->foo->bar);
        $this->assertInternalType('string', $this->_object->application->test->foo->bar->z1337);
        $this->assertInternalType('string', $this->_object->application->test->foo->bar->z7331);
        $this->assertEquals('w00t', $this->_object->application->test->foo->bar->z1337);
        $this->assertEquals(':)', $this->_object->application->test->foo->bar->z7331);

    }


    /**
     * Test config with environment
     *
     * @return \void
     */
    public function testConfigWithEnv()
    {
        $config = Ini::read($this->_iniFile, 'development');
        $this->assertObjectHasAttribute('sysInfos', $config);
        $this->assertEquals('On', $config->sysInfos);

        $config = Ini::read($this->_iniFile, 'production');
        $this->assertObjectHasAttribute('sysInfos', $config);
        $this->assertEquals('Off', $config->sysInfos);

        try {
            $config = Ini::read($this->_iniFile, 'notexist');
        } catch (Exception\UndefinedProperty $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\UndefinedProperty', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test open inexistant file
     *
     * @return \void
     */
    public function testOpenInexistantFile()
    {
        try {
            $config = Ini::read($this->_iniFail);
        } catch (Exception $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test Bad section
     *
     * @return \void
     */
    public function testBadSection()
    {
        try {
            $config = Ini::read($this->_iniBadSection);
        } catch (Exception\SyntaxError $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\SyntaxError', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test Bad key
     *
     * @return \void
     */
    public function testBadKey()
    {
        try {
            $config = Ini::read($this->_iniBadKey);
        } catch (Exception\SyntaxError $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\SyntaxError', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test no parent
     *
     * @return \void
     */
    public function testNoParent()
    {
        try {
            $config = Ini::read($this->_iniNoParent);
        } catch (Exception\SyntaxError $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\SyntaxError', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Test Syntax error directives
     *
     * @return \void
     */
    public function testSyntaxError()
    {
        try {
            $config = Ini::read($this->_iniSyntaxError);
        } catch (Exception\SyntaxError $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\SyntaxError', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


    /**
     * Get undefined property test
     *
     * @covers \SLiib\Config::__get
     *
     * @return \void
     */
    public function testGet()
    {
        try {
            $foo = $this->_object->bar;
        } catch (Exception\UndefinedProperty $e) {
            $this->assertInstanceOf('\SLiib\Config\Exception\UndefinedProperty', $e);
            $this->assertInstanceOf('\SLiib\IException\Logic', $e);
            return;
        } catch (\Exception $e) {
            $this->fail('Bad exception has been raised');
        }

        $this->fail('No exception has been raised');

    }


}